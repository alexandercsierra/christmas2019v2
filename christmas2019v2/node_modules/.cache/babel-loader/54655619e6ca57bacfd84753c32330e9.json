{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.random = random;\nexports.lerp = lerp;\nexports.getSize = getSize;\n/**\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\n * @param min The minimum value\n * @param max The maximum value\n */\n\nfunction random(min, max) {\n  var randomNumber = Math.random() * (max - min + 1) + min;\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber;\n  } else {\n    return Math.floor(randomNumber);\n  }\n}\n/**\n * Linear interpolation function to gradually step towards a target value\n * @param start The current value\n * @param end The target value\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\n */\n\n\nfunction lerp(start, end, normal) {\n  return (1 - normal) * start + normal * end;\n}\n/**\n * Gets the height and width of the provided HTML element\n * @param element The html element to measure\n */\n\n\nfunction getSize(element) {\n  if (!element) return {\n    height: 0,\n    width: 0\n  };\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth\n  };\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":["randomNumber","Math","max","Number","normal","height","width","element","offsetWidth"],"mappings":";;;;;;;;AAAA;;;;;;;AAMO,SAAA,MAAA,CAAA,GAAA,EAAA,GAAA,EAAkD;AACvD,MAAMA,YAAY,GAAGC,IAAI,CAAJA,MAAAA,MAAiBC,GAAG,GAAHA,GAAAA,GAAjBD,CAAAA,IAArB,GAAA;;AAEA,MAAI,CAACE,MAAM,CAANA,SAAAA,CAAD,GAACA,CAAD,IAA0B,CAACA,MAAM,CAANA,SAAAA,CAA/B,GAA+BA,CAA/B,EAAsD;AACpD,WAAA,YAAA;AADF,GAAA,MAEO;AACL,WAAOF,IAAI,CAAJA,KAAAA,CAAP,YAAOA,CAAP;AACD;AACF;AAED;;;;;;;;AAMO,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAA0D;AAC/D,SAAO,CAAC,IAAD,MAAA,IAAA,KAAA,GAAuBG,MAAM,GAApC,GAAA;AACD;AAED;;;;;;AAIO,SAAA,OAAA,CAAA,OAAA,EAAwC;AAC7C,MAAI,CAAJ,OAAA,EAAc,OAAO;AAAEC,IAAAA,MAAM,EAAR,CAAA;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAAP;AAEd,SAAO;AACLD,IAAAA,MAAM,EAAEE,OAAO,CADV,YAAA;AAELD,IAAAA,KAAK,EAAEC,OAAO,CAACC;AAFV,GAAP;AAID","sourcesContent":["/**\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\n * @param min The minimum value\n * @param max The maximum value\n */\nexport function random(min: number, max: number): number {\n  const randomNumber = Math.random() * (max - min + 1) + min\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber\n  } else {\n    return Math.floor(randomNumber)\n  }\n}\n\n/**\n * Linear interpolation function to gradually step towards a target value\n * @param start The current value\n * @param end The target value\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\n */\nexport function lerp(start: number, end: number, normal: number) {\n  return (1 - normal) * start + normal * end\n}\n\n/**\n * Gets the height and width of the provided HTML element\n * @param element The html element to measure\n */\nexport function getSize(element?: HTMLElement) {\n  if (!element) return { height: 0, width: 0 }\n\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}