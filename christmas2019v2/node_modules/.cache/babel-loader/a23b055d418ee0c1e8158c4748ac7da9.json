{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _config = require(\"./config\");\n\nvar _hooks = require(\"./hooks\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nvar Snowfall = function Snowfall() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#dee4fd' : _ref$color,\n      _ref$snowflakeCount = _ref.snowflakeCount,\n      snowflakeCount = _ref$snowflakeCount === void 0 ? 150 : _ref$snowflakeCount,\n      style = _ref.style;\n\n  var mergedStyle = (0, _hooks.useSnowfallStyle)(style);\n  var canvasRef = (0, _react.useRef)();\n  var canvasSize = (0, _hooks.useComponentSize)(canvasRef);\n  var animationFrame = (0, _react.useRef)(0);\n  var lastUpdate = (0, _react.useRef)(Date.now());\n  var config = (0, _react.useMemo)(function () {\n    return {\n      color: color\n    };\n  }, [color]);\n  var snowflakes = (0, _hooks.useSnowflakes)(canvasRef, snowflakeCount, config);\n\n  var updateCanvasRef = function updateCanvasRef(element) {\n    canvasRef.current = element;\n  };\n\n  var render = (0, _react.useCallback)(function () {\n    var framesPassed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var canvas = canvasRef.current;\n\n    if (canvas) {\n      // Update the positions of the snowflakes\n      snowflakes.forEach(function (snowflake) {\n        return snowflake.update(canvas, framesPassed);\n      }); // Render them if the canvas is available\n\n      var ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n        snowflakes.forEach(function (snowflake) {\n          return snowflake.draw(canvas, ctx);\n        });\n      }\n    }\n  }, [snowflakes]);\n  var loop = (0, _react.useCallback)(function () {\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\n    var now = Date.now();\n    var msPassed = Date.now() - lastUpdate.current;\n    lastUpdate.current = now; // Frames that would have passed if running at 60 fps\n\n    var framesPassed = msPassed / _config.targetFrameTime;\n    render(framesPassed);\n    animationFrame.current = requestAnimationFrame(loop);\n  }, [render]);\n  (0, _react.useEffect)(function () {\n    loop();\n    return function () {\n      return cancelAnimationFrame(animationFrame.current);\n    };\n  }, [loop]);\n  return _react[\"default\"].createElement(\"canvas\", {\n    ref: updateCanvasRef,\n    height: canvasSize.height,\n    width: canvasSize.width,\n    style: mergedStyle\n  });\n};\n\nvar _default = Snowfall;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/Snowfall.tsx"],"names":["Snowfall","color","snowflakeCount","style","mergedStyle","canvasRef","canvasSize","animationFrame","lastUpdate","Date","config","snowflakes","updateCanvasRef","render","framesPassed","canvas","snowflake","ctx","loop","now","msPassed","targetFrameTime","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { targetFrameTime } from './config'\nimport { useComponentSize, useSnowfallStyle, useSnowflakes } from './hooks'\n\nexport interface SnowfallProps {\n  color?: string\n  snowflakeCount?: number\n  style?: React.CSSProperties\n}\n\nconst Snowfall = ({ color = '#dee4fd', snowflakeCount = 150, style }: SnowfallProps = {}) => {\n  const mergedStyle = useSnowfallStyle(style)\n\n  const canvasRef = useRef<HTMLCanvasElement>()\n  const canvasSize = useComponentSize(canvasRef)\n  const animationFrame = useRef(0)\n\n  const lastUpdate = useRef(Date.now())\n  const config = useMemo(() => ({ color }), [color])\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\n\n  const updateCanvasRef = (element: HTMLCanvasElement) => {\n    canvasRef.current = element\n  }\n\n  const render = useCallback(\n    (framesPassed: number = 1) => {\n      const canvas = canvasRef.current\n      if (canvas) {\n        // Update the positions of the snowflakes\n        snowflakes.forEach(snowflake => snowflake.update(canvas, framesPassed))\n\n        // Render them if the canvas is available\n        const ctx = canvas.getContext('2d')\n        if (ctx) {\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\n\n          snowflakes.forEach(snowflake => snowflake.draw(canvas, ctx))\n        }\n      }\n    },\n    [snowflakes],\n  )\n\n  const loop = useCallback(() => {\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\n    const now = Date.now()\n    const msPassed = Date.now() - lastUpdate.current\n    lastUpdate.current = now\n\n    // Frames that would have passed if running at 60 fps\n    const framesPassed = msPassed / targetFrameTime\n\n    render(framesPassed)\n\n    animationFrame.current = requestAnimationFrame(loop)\n  }, [render])\n\n  useEffect(() => {\n    loop()\n    return () => cancelAnimationFrame(animationFrame.current)\n  }, [loop])\n\n  return <canvas ref={updateCanvasRef} height={canvasSize.height} width={canvasSize.width} style={mergedStyle} />\n}\n\nexport default Snowfall\n"]},"metadata":{},"sourceType":"script"}